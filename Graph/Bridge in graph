QUES : Critical Connections in a Network

There are n servers numbered from 0 to n - 1 connected by undirected server-to-server connections forming a network where connections[i] = [ai, bi] 
represents a connection between servers ai and bi. Any server can reach other servers directly or indirectly through the network.
A critical connection is a connection that, if removed, will make some servers unable to reach some other server.
Return all critical connections in the network in any order.

 

->Example 1:
Input: n = 4, connections = [[0,1],[1,2],[2,0],[1,3]]
Output: [[1,3]]
Explanation: [[3,1]] is also accepted.


->Example 2:
Input: n = 2, connections = [[0,1]]
Output: [[0,1]]

CODE :

USING TRAJAN's ALGORITHM

#include<bits/stdc++.h>
using namespace std;
#define V 5
#define pb push_back

unordered_map<int,vector<int>> adj;

void DFS(int u,vector<int>& disc,vector<int>& low,vector<int>& parent,vector<pair<int,int>>& bridge)
{
	static int time = 0;
	disc[u] = low[u] = time;
	time+=1;

	for(int v: adj[u])
	{
		if(disc[v]==-1)	//If v is not visited
		{
			parent[v] = u;
			DFS(v,disc,low,parent,bridge);
			low[u] = min(low[u],low[v]);

			if(low[v] > disc[u])
				bridge.pb({u,v});
		}
		else if(v!=parent[u])	//Ignore child to parent edge
			low[u] = min(low[u],disc[v]);
	}
}

void findBridges_Tarjan()
{
	vector<int> disc(V,-1),low(V,-1),parent(V,-1);
	vector<pair<int,int>> bridge;

	for(int i=0;i<V;++i)
		if(disc[i]==-1)
			DFS(i,disc,low,parent,bridge);

	cout<<"Bridges are: \n";
	for(auto it: bridge)
		cout<<it.first<<"-->"<<it.second<<"\n";
}
