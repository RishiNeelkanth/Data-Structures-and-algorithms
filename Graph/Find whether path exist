QUES: Find whether path exist 

Given a grid of size n*n filled with 0, 1, 2, 3. Check whether there is a path possible from the source to destination. You can traverse up, down, right and left.
The description of cells is as follows:
A value of cell 1 means Source.
A value of cell 2 means Destination.
A value of cell 3 means Blank cell.
A value of cell 0 means Wall.
Note: There are only a single source and a single destination.
 

->Example 1:
Input: grid = {{3,0,3,0,0},{3,0,0,0,3}
,{3,3,3,3,3},{0,2,3,0,0},{3,0,0,1,3}}
Output: 0
Explanation: The grid is-
3 0 3 0 0 
3 0 0 0 3 
3 3 3 3 3 
0 2 3 0 0 
3 0 0 1 3 
There is no path to reach at (3,1) i,e at 
destination from (4,3) i,e source.

->Example 2:
Input: grid = {{1,3},{3,2}}
Output: 1
Explanation: The grid is-
1 3
3 2
There is a path from (0,0) i,e source to (1,1) 
i,e destination.

CODE:
**DFS

class Solution
{
    public:
    int n;
    //Function to find whether a path exists from the source to destination.
    void check(int a,int b,vector<vector<int>>& grid,vector<vector<bool>>& visited)
    {
        if(a<0 || b<0 || a>=n || b>=n || grid[a][b]==0 || visited[a][b]==true)
        {
            return ;
        }
        visited[a][b]=true;
        check(a+1,b  ,grid,visited);
        check(a  ,b+1,grid,visited);
        check(a-1,b  ,grid,visited);
        check(a  ,b-1,grid,visited);
        
    }
    bool is_Possible(vector<vector<int>>& grid) 
    {
        n=grid.size();
        vector<vector<bool>> visited(n,vector<bool> (n,false));
        int a,b,tx,ty;
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(grid[i][j]==1)
                {
                    a=i;
                    b=j;
                }
                if(grid[i][j]==2)
                {
                    tx=i;
                    ty=j;
                }
            }
        }
        check(a,b,grid,visited);
        return visited[tx][ty];
    }
};

