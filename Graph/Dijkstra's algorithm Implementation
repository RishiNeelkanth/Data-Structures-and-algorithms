Dijkstra's algorithm implementation 

Given a weighted, undirected and connected graph of V vertices and E edges, Find the shortest distance of all the vertex's from the source vertex S.
Note: The Graph doesn't contain any negative weight cycle.

 
->Example 1:
Input:
S = 0
Output:
0 9
Explanation:
The source vertex is 0. Hence, the shortest 
distance of node 0 is 0 and the shortest 
distance from node 9 is 9 - 0 = 9.
 

->Example 2:
Input:
S = 2
Output:
4 3 0
Explanation:
For nodes 2 to 0, we can follow the path-
2-1-0. This has a distance of 1+3 = 4,
whereas the path 2-0 has a distance of 6. So,
the Shortest path from 2 to 0 is 4.
The other distances are pretty straight-forward.

CODE :

class Solution
{
	public:
    //Function to find the shortest distance of all the vertices
    //from the source vertex S.
    
    vector <int> dijkstra(int V, vector<vector<int>> adj[], int S)
    {
        vector<int> dist(V,INT_MAX);
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> q;
        dist[S]=0;
        q.push({0,S});
        while(!q.empty())
        {
            int dis=q.top().first;
            int node=q.top().second;
            q.pop();
            for(auto it : adj[node])
            {
                int next=it[0];
                int nextdis=it[1];
                if(dis+nextdis<dist[next])
                {
                    dist[next]=dis+nextdis;
                    q.push({dist[next],next});
                }
            }
        }
        
        return dist;
    }
};
