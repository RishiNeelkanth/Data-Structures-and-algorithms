QUES: Cycle Detection in Directed Graph

Given a Directed Graph with V vertices (Numbered from 0 to V-1) and E edges, check whether it contains any cycle or not.


->Example 1:
Input:
Output: 1
Explanation: 3 -> 3 is a cycle

->Example 2:
Input:
Output: 0
Explanation: no cycle in the graph

Code:

** using DFS

// { Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
class Solution {
  public:
    // Function to detect cycle in a directed graph.
    bool checkcycle(int node,vector<int> adj[],vector<int> &vis,vector<int> &dfsvis)
    {
        vis[node]=1;
        dfsvis[node]=1;
        for(auto it : adj[node])
        {
            if(!vis[it])
            {
                if(checkcycle(it,adj,vis,dfsvis)){ return true;}
            }
            else if(dfsvis[it]){return true;}
        }
        dfsvis[node]=0;
        return false;
    }
    bool isCyclic(int V, vector<int> adj[]) {
        vector<int> vis(V,0);
        vector<int> dfsvis(V,0);
    
    for(int i=0;i<V;i++)
    {
        if(!vis[i])
        {
            if(checkcycle(i,adj,vis,dfsvis)) return true;
        }
    }
    return false;
    }
};


int main() {

    int t;
    cin >> t;
    while (t--) {
        int V, E;
        cin >> V >> E;

        vector<int> adj[V];

        for (int i = 0; i < E; i++) {
            int u, v;
            cin >> u >> v;
            adj[u].push_back(v);
        }

        Solution obj;
        cout << obj.isCyclic(V, adj) << "\n";
    }

    return 0;
}
  
