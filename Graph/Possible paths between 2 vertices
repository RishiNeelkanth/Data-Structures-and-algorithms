QUES: Possible paths between 2 vertices 

Given a Directed Graph having V nodes numbered from 1 to V, and E directed edges. Given two nodes, source and destination, count the number of ways or paths 
between these two vertices in the directed graph. These paths should not contain any cycle.
Note: Graph doesn't contain multiple edges, self-loop, and cycles.

->Example 1:
Input:
Output: 4
Explanation: 
There are 4 paths from 0 to 4.
0 -> 4
0 -> 1 -> 4
0 -> 2 -> 4
0 -> 1 -> 3 -> 2 -> 4

->Example 2:
Input:
Output: 3
Explanation:
There are 3 paths from 0 to 3.
0 -> 3
0 -> 1 -> 3
0 -> 1 -> 2 -> 3

CODE:

**DFS

class Solution {
  public:
  void dfs(int& count , int src,int des,vector<int> adj[])
  {
      if(src==des)
      {
          count++;
          return;
      }
          for(auto it : adj[src])
          {
              dfs(count,it,des,adj);
          }
  }
    // Function to count paths between two vertices in a directed graph.
    int countPaths(int V, vector<int> adj[], int source, int destination) {
        int count=0;
        dfs(count,source,destination,adj);
        return count;
    }
};
