QUES: Count the paths 

Given a directed acyclic graph(DAG) with n nodes labeled from 0 to n-1. Given edges, s and d ,count the number of ways to reach from s to d.There is a 
directed Edge from vertex edges[i][0] to the vertex edges[i][1].

 
->Example:
Input: edges = {{0,1},{0,3},{1,2},{3,2}}, 
n = 4, s = 0, d = 2
Output: 2
Explanation: There are two ways to reach at 
2 from 0. These are-
1. 0->1->2
2. 0->3->2

CODE:
**DFS

class Solution {
public:

    void dfs(int s,int d ,vector<bool>& vis,int& count,vector<int> graph[])
    {
        if(s==d)
        {
            count++;
            return;
        }
        vis[s]=true;
        for(auto it: graph[s])
        {
            if(!vis[it])
            {
                dfs(it,d,vis,count,graph);
            }
        }
        vis[s]=false;
    }
	int possible_paths(vector<vector<int>>edge, int n, int s, int d){
	    // Code here
	    vector<int> graph[n];
	    for(int i=0;i<edge.size();i++)
	    {
	        int u = edge[i][0];           
            int v = edge[i][1];
            graph[u].push_back(v); 
	    }
	    vector<bool> vis(n,false);
	    int count=0;
	    dfs(s,d,vis,count,graph);
	    return count;
	}
};
