QUES: Find the string in grid 

Given a 2D grid of n*m of characters and a word, find all occurrences of given word in grid. A word can be matched in all 8 directions at any point. Word is 
said be found in a direction if all characters match in this direction (not in zig-zag form). The 8 directions are, horizontally left, horizontally right, vertically 
up, vertically down and 4 diagonal directions.
 
->Example 1:
Input: grid = {{a,b,c},{d,r,f},{g,h,i}},
word = "abc"
Output: {{0,0}}
Explanation: From (0,0) one can find "abc"
in horizontally right direction.

->Example 2:
Input: grid = {{a,b,a,b},{a,b,e,b},{e,b,e,b}}
,word = "abe"
Output: {{0,0},{0,2},{1,0}}
Explanation: From (0,0) one can find "abe" in 
right-down diagonal. From (0,2) one can
find "abe" in left-down diagonal. From
(1,0) one can find "abe" in Horizontally right 
direction.

CODE:
**DFS

int n,m;
    bool check(int i,int j,int x,int y,string &word,vector<vector<char>>& grid)
    {
        int k=word.size();
        int nx=i+x*k;
        int ny=j+y*k;
        if(nx<-1 || nx>n || ny<-1 || ny>m) return false;
        for(int K=0;K<k;K++)
        {
            if(word[K]!=grid[i+x*K][j+y*K]) return false;
        }
        return true;
    }
	vector<vector<int>>searchWord(vector<vector<char>>grid, string word){
	    n=grid.size();
	    m=grid[0].size();
	    vector<vector<int>> ans;
	    int DR[8]={1,0,-1,0,1,-1,1,-1};
	    int DC[8]={0,1,0,-1,1,1,-1,-1};
	    for(int i=0;i<n;i++)
	        for(int j=0;j<m;j++)
	            for(int k=0;k<8;k++)
	            {
	                int x=DR[k];
	                int y=DC[k];
	                if(check(i,j,x,y,word,grid))
	                {
	                    ans.push_back({i,j});
	                    break;
	                }
	            }
	   return ans;
	}
};
