Ques: Shortest Path in Binary Matrix

Given an n x n binary matrix grid, return the length of the shortest clear path in the matrix. If there is no clear path, return -1.
A clear path in a binary matrix is a path from the top-left cell (i.e., (0, 0)) to the bottom-right cell (i.e., (n - 1, n - 1)) such that:
All the visited cells of the path are 0.
All the adjacent cells of the path are 8-directionally connected (i.e., they are different and they share an edge or a corner).
The length of a clear path is the number of visited cells of this path.


->Example 1:
Input: grid = [[0,1],[1,0]]
Output: 2

->Example 2:
Input: grid = [[0,0,0],[1,1,0],[1,1,0]]
Output: 4

->Example 3:
Input: grid = [[1,0,0],[1,1,0],[1,1,0]]
Output: -1

CODE:

class Solution {
public:
    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
        if(grid.empty() or grid[0][0]!=0)
        {
            return -1;
        }
        int m=grid.size();
        int n=grid[0].size();
        if(grid[0][0]==0 and m==1 and n==1)
        {
            return 1;
        }
        int dr[8]={1,1,0,-1,-1,-1,0,1};
        int dc[8]={0,1,1,1,0,-1,-1,-1};
        int steps=0;
        queue<pair<int,int>>queue;
        queue.push({0,0});
        grid[0][0]=1;
        while(!queue.empty())
        {
            steps++;
            int size=queue.size();
            for(int i=0;i<size;i++)
            {
                auto coord=queue.front();
                queue.pop();
                for(int i=0;i<8;i++)
                {
                    int row=coord.first+dr[i];
                    int col=coord.second+dc[i];
                    if(row<m and row>=0 and col<n and col>=0 and grid[row][col]!=1)
                    {
                        if(row==m-1 and col==n-1)
                            return steps+1;
                        queue.push({row,col});
                        grid[row][col]=1;
                    }
                }
            }
        }
        return -1;
    }
};
