QUES : Word Ladder 1

A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 -> ... -> sk such that:
Every adjacent pair of words differs by a single letter.
Every si for 1 <= i <= k is in wordList. Note that beginWord does not need to be in wordList.
sk == endWord
Given two words, beginWord and endWord, and a dictionary wordList, return the number of words in the shortest transformation sequence from beginWord to endWord, or 
0 if no such sequence exists.

->Example 1:
Input: beginWord = "hit", endWord = "cog", wordList = ["hot","dot","dog","lot","log","cog"]
Output: 5
Explanation: One shortest transformation sequence is "hit" -> "hot" -> "dot" -> "dog" -> cog", which is 5 words long.

->Example 2:
Input: beginWord = "hit", endWord = "cog", wordList = ["hot","dot","dog","lot","log"]
Output: 0
Explanation: The endWord "cog" is not in wordList, therefore there is no valid transformation sequence.

CODE:

class Solution {
public:
    int ladderLength(string startWord, string targetWord, vector<string>& wordList) {
        unordered_set <string> s;
        bool present=false;
        for(int i=0;i<wordList.size();i++)
        {
            if(targetWord.compare(wordList[i])==0)
            {
                present=true;
            }
            s.insert(wordList[i]);
        }
        if(present==false)
        {
            return 0;
        }
        int level=0;
        queue<string> q;
        q.push(startWord);
        while(!q.empty())
        {
            level+=1;
            int size=q.size();
            while(size--)
            {
                string p=q.front();
                q.pop();
                for(int i=0;i<p.size();i++)
                {
                    string temp=p;
                    for(char a='a';a<='z';a++)
                    {
                        temp[i]=a;
                        if(p.compare(temp)==0)
                        {
                            continue;
                        }
                        if(temp.compare(targetWord)==0)
                        {
                            return level+1;
                        }
                        if(s.find(temp)!=s.end())
                        {
                            q.push(temp);
                            s.erase(temp);
                        }
                    }
                }
            }
        }
        return 0;
    }
};
