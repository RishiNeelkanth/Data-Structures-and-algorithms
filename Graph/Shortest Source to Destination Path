QUES : Shortest Source to Destination Path 

Given a 2D binary matrix A(0-based index) of dimensions NxM. Find the minimum number of steps required to reach from (0,0) to (X, Y).
Note: You can only move left, right, up and down, and only through cells that contain 1.

->Example 1:
Input:
N=3
M=4
A=[[1,0,0,0], 
[1,1,0,1],[0,1,1,1]]
X=2
Y=3 
Output:
5
Explanation:
The shortest path is as follows:
(0,0)->(1,0)->(1,1)->(2,1)->(2,2)->(2,3).

->Example 2:
Input:
N=3
M=4
A=[[1,1,1,1],
[0,0,0,1],[0,0,0,1]]
X=0
Y=3
Output:
3
Explanation:
The shortest path is as follows:
(0,0)->(0,1)->(0,2)->(0,3).

CODE:

class Solution {
  public:
    int shortestDistance(int n, int m, vector<vector<int>> grid, int x, int y) {
        if(grid.empty() or grid[0][0]!=1)
        {
            return -1;
        }
        if(grid[0][0]==1 and m==1 and n==1)
        {
            return 1;
        }
        int dr[4]={1,0,0,-1};
        int dc[4]={0,1,-1,0};
        int steps=0;
        queue<pair<int,int>>queue;
        queue.push({0,0});
        grid[0][0]=0;
        while(!queue.empty())
        {
            steps++;
            int size=queue.size();
            for(int i=0;i<size;i++)
            {
                auto coord=queue.front();
                queue.pop();
                for(int i=0;i<4;i++)
                {
                    int row=coord.first+dr[i];
                    int col=coord.second+dc[i];
                    if(row<n and row>=0 and col<m and col>=0 and grid[row][col]!=0)
                    {
                        if(row==x and col==y)
                            return steps;
                        queue.push({row,col});
                        grid[row][col]=0;
                    }
                }
            }
        }
        return -1;
    }
};
