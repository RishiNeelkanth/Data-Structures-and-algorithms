Ques: Find if Path Exists in Graph

There is a bi-directional graph with n vertices, where each vertex is labeled from 0 to n - 1 (inclusive). The edges in the graph are represented as a 2D integer 
array edges, where each edges[i] = [ui, vi] denotes a bi-directional edge between vertex ui and vertex vi. Every vertex pair is connected by at most one edge, 
and no vertex has an edge to itself.
You want to determine if there is a valid path that exists from vertex source to vertex destination.
Given edges and the integers n, source, and destination, return true if there is a valid path from source to destination, or false otherwise.

->Example 1:
Input: n = 3, edges = [[0,1],[1,2],[2,0]], source = 0, destination = 2
Output: true
Explanation: There are two paths from vertex 0 to vertex 2:
- 0 → 1 → 2
- 0 → 2

->Example 2:
Input: n = 6, edges = [[0,1],[0,2],[3,5],[5,4],[4,3]], source = 0, destination = 5
Output: false
Explanation: There is no path from vertex 0 to vertex 5.

CODE:
** DFS

class Solution {
public:
 vector<int> graph[200001];    // according to the constraints
    
    void dfs(int start, vector<bool>&vis){
        vis[start] = true;
        
        for(auto neighbour : graph[start]){
            if(!vis[neighbour] and neighbour != start)
                dfs(neighbour, vis);
        }
    }
    
    bool validPath(int n, vector<vector<int>>& edges, int start, int end) {
        for(int i=0; i<edges.size(); i++){
            int u = edges[i][0];           
            int v = edges[i][1];
            graph[u].push_back(v);      
            graph[v].push_back(u);
        }
        vector<bool>vis(n, false);
        dfs(start, vis);
        return (vis[end] == true);
    }
};
