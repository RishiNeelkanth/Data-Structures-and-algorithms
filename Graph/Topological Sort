NOTE :: Topological Sorting for a graph is not possible if the graph is not a  Directed Acyclic Graph (DAG).

Ques: Topological Sort

Given a Directed Acyclic Graph (DAG) with V vertices and E edges, Find any Topological Sorting of that Graph.


->Example 1:
Input:
Output:
1
Explanation:
The output 1 denotes that the order is
valid. So, if you have, implemented
your function correctly, then output
would be 1 for all test cases.
One possible Topological order for the
graph is 3, 2, 1, 0.

->Example 2:
Input:
Output:
1
Explanation:
The output 1 denotes that the order is
valid. So, if you have, implemented
your function correctly, then output
would be 1 for all test cases.
One possible Topological order for the
graph is 5, 4, 2, 1, 3, 0.

Code:

** Using Dfs

class Solution
{
	public:
	//Function to return list containing vertices in Topological order. 
	void topsort( int node,vector<int> &vis,stack<int> &st,vector<int> adj[])
	{
	    vis[node]=1;
	    for(auto it : adj[node])
	    {
	        if(!vis[it])
	        {
	            topsort(it,vis,st,adj);
	        }
	    }
	    st.push(node);
	}
	vector<int> topoSort(int V, vector<int> adj[]) 
	{
	    vector<int> vis(V,0);
	    stack<int> st;
	    for(int i=0;i<V;i++)
	    {
	        if(!vis[i])
	        {
	            topsort(i,vis,st,adj);
	        }
	    }
	    vector<int> ans;
	    while(!st.empty())
	    {
	        ans.push_back(st.top());
	        st.pop();
	    }
	    return ans;
	}
};

Using BFS

class Solution
{
	public:
	

	vector<int> topoSort(int V, vector<int> adj[]) 
	{
	    queue<int> q;
	    vector<int> indegree(V,0);
	    for(int i=0;i<V;i++)
	    {
	        for(auto it : adj[i])
	        {
	            indegree[it]++;
	        }
	    }
	    for(int i=0;i<V;i++)
	    {
	        if(!indegree[i])
	        {
	            q.push(i);
	        }
	    }
	    vector<int> ans;
	    while(!q.empty())
	    {
	        int node=q.front();
	        q.pop();
	        ans.push_back(node);
	        for(auto it : adj[node])
	        {
	            indegree[it]--;
	            if(indegree[it]==0)
	            {
	                q.push(it);
	            }
	        }
	    }
	    return ans;
	}
};


