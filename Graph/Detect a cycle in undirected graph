Ques: Detect a cycle in undirected graph

Given an undirected graph with V vertices and E edges, check whether it contains any cycle or not. 

->Example 1:
Input:   
Output: 1
Explanation: 1->2->3->4->1 is a cycle.

->Example 2:
Input: 
Output: 0
Explanation: No cycle in the graph.

Code:
** Using BFS


bool isCycle(int v, vector<int> adj[]) {
        int i;
         vector<int> vis(v, 0);
        
        for(i=0;i<v;i++){
            if(!vis[i]){
                if(solve(i,adj, vis))
                    return true;
                
            }
        }
        
        return false;
    }
    
    bool solve(int i, vector<int> adj[],vector<int> &vis){
        queue<pair<int,int>> q;
        
        vis[i] = 1;
        q.push({i,-1});
        
        while(!q.empty()){
            int n = q.front().first;
            int p = q.front().second;
            
            q.pop();
            for(auto it:adj[n]){
                if(!vis[it]){
                    vis[it] = 1;
                    q.push({it, n});
                }
                else if(p!=it)
                    return true;
            }
        }
        return false;
        
    }
    
    
 **** Using DFS
 
 class Solution {
  public:
    // Function to detect cycle in an undirected graph.
    bool cycle(int node,int par ,vector<int> &vis,vector<int> adj[])
    {
        vis[node]=1;
        for(auto it : adj[node])
            {
                if(!vis[it])
                {
                    if(cycle(it,node,vis,adj)){return true;}
                }
                else if(par!=it)
                {
                    return true;
                }
            }
        return false;
    }
    bool isCycle(int V, vector<int> adj[]) {
        vector<int> vis(V,0);
        for(int i = 0; i < V; i++)
        {
            if(!vis[i])
            {
                if(cycle(i,-1,vis,adj)) {return true;}
            }
        }
        
        return false;
    }
};
