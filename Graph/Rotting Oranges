QUES: Rotting Oranges

You are given an m x n grid where each cell can have one of three values:

0 representing an empty cell,
1 representing a fresh orange, or
2 representing a rotten orange.
Every minute, any fresh orange that is 4-directionally adjacent to a rotten orange becomes rotten.

Return the minimum number of minutes that must elapse until no cell has a fresh orange. If this is impossible, return -1.

 

->Example 1:
Input: grid = [[2,1,1],[1,1,0],[0,1,1]]
Output: 4

->Example 2:
Input: grid = [[2,1,1],[0,1,1],[1,0,1]]
Output: -1
Explanation: The orange in the bottom left corner (row 2, column 0) is never rotten, because rotting only happens 4-directionally.

->Example 3:
Input: grid = [[0,2]]
Output: 0
Explanation: Since there are already no fresh oranges at minute 0, the answer is just 0.

CODE:

**Using BFS

class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        int ans=0;
        int r=grid.size();
        int c=grid[0].size();
        int dx[4]={1,0,-1,0};
        int dy[4]={0,1,0,-1};
        vector<vector<int>> level(r,vector<int>(c,INT_MAX));
        vector<vector<int>> vis(r,vector<int>(c,0));
        queue <pair<int,int>> q;
        for(int i=0;i<r;i++)
        {
            for(int j=0;j<c;j++)
            {
                if(grid[i][j]==2)
                {
                    level[i][j]=0;
                    vis[i][j]=1;
                    q.push({i,j});
                }
                if(grid[i][j]==0)
                {
                    level[i][j]=0;
                    vis[i][j]=1;
                }
            }
        }
        
        while(!q.empty())
        {
            int x=q.front().first;
            int y=q.front().second;
            q.pop();
            for(int i=0;i<4;i++)
            {
                int tx=x+dx[i];
                int ty=y+dy[i];
                if(tx>=0 && ty>=0 && tx<r && ty<c && !vis[tx][ty] && grid[tx][ty]==1)
                {
                    vis[tx][ty]=1;
                    if(level[x][y]<level[tx][ty])
                    {
                        level[tx][ty]=level[x][y]+1;
                    }
                    q.push({tx,ty});
                }
            }
        }
        for(int i=0;i<r;i++)
        {
            for(int j=0;j<c;j++)
            {
                if(level[i][j]>ans)
                ans=level[i][j];            
                
            }
        }
        if(ans==INT_MAX)
        {
            return -1;
        }
        return ans;
    }
};
