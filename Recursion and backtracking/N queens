Ques: N-Queens

The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.
Given an integer n, return all distinct solutions to the n-queens puzzle. You may return the answer in any order.
Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space, respectively.

->Example 1:
Input: n = 4
Output: [[".Q..","...Q","Q...","..Q."],["..Q.","Q...","...Q",".Q.."]]
Explanation: There exist two distinct solutions to the 4-queens puzzle as shown above

->Example 2:
Input: n = 1
Output: [["Q"]]

Code:
** Recursion and backtracking

class Solution {
public:
    bool check(vector<string> board,int col,int row)
    {
                                                     //check column
																										 
        for(int i=0;i<board.size();i++)
        {
            if(board[i][col]=='Q'){return false;}
        }
        int x = row; int y = col;
		
                           //checking for upper left diagonal(non-main diagonal), row is decreasing and col too
													 
        while(x>=0 && y>=0){
            if(board[x][y] == 'Q'){return false;}
            --x;  --y; 
        }
        
                                     //checking for main diagonal(upper right), row is decreasing and col increasing
																		 
        while(row>=0 && col<board.size()){
            if(board[row][col] == 'Q'){return false;}
            --row; ++col;
        }
        
                                     //The fn didn't returned false till , implies that our position is safe to place the queen
				
        return true;
    }
    
    void solve(vector<vector<string>>& ans,vector<string> board,int n,int row)
    {
        if(row==board.size())
        {
            ans.push_back(board);
            return;
        }
        for(int col=0;col<board.size();col++)
        {   
            if(check(board,col,row))
            {
                board[row][col]='Q';
                solve(ans,board,n,row+1);
                board[row][col]='.';
            }
        }
    }
    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>> ans;
        vector<string> board(n, string(n, '.'));
        solve(ans,board,n,0);
        return ans;
    }
};
