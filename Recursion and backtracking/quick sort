Ques: quick sort

Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red
, white, and blue.
We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.
You must solve this problem without using the library's sort function.

->Example 1:
Input: nums = [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]

->Example 2:
Input: nums = [2,0,1]
Output: [0,1,2]

Code: 
** recursion

class Solution {
public:
    int partition(vector <int>& nums,int s,int e)
    {   int count=0;
        int pivot=nums[s];
        for(int i=s+1;i<=e;i++)
        {
            if(pivot>=nums[i])
            {
                count++;
            }
        }
     int pivotindex=count+s;
     swap(nums[s],nums[pivotindex]);
     int i=s;
     int j=e;
     while(i<pivotindex&&j>pivotindex)
     {
         while(nums[i]<pivot)
         {
             i++;
         }
         while(nums[j]>pivot)
         {
             j--;
         }
         if(i<pivotindex&&j>pivotindex)
         {
             swap(nums[i++],nums[j--]);
         }
     }
     return pivotindex;
    }
    void quicksort(vector<int>& nums,int s,int e)
    {
        if(s>=e)
        {
            return;
        }
        int p=partition(nums,s,e);
        quicksort(nums,s,p-1);
        quicksort(nums,p+1,e);
    }
    void sortColors(vector<int>& nums) {
        int n=nums.size();
        quicksort(nums,0,n-1);
    }
    
};
