QUES : Target Sum

Given an array of integers A[] of length N and an integer target.
You want to build an expression out of A by adding one of the symbols '+' and '-' before each integer in A and then concatenate all the integers.
For example, if arr = {2, 1}, you can add a '+' before 2 and a '-' before 1 and concatenate them to build the expression "+2-1".
Return the number of different expressions that can be built, which evaluates to target.



->Example 1:
Input:
N = 5
A[] = {1, 1, 1, 1, 1}
target = 3
Output:5
Explanation:
There are 5 ways to assign symbols to 
make the sum of nums be target 3.
-1 + 1 + 1 + 1 + 1 = 3
+1 - 1 + 1 + 1 + 1 = 3
+1 + 1 - 1 + 1 + 1 = 3
+1 + 1 + 1 - 1 + 1 = 3
+1 + 1 + 1 + 1 - 1 = 3


->Example 2:
Input:
N = 1
A[] = {1}
target = 1
Output:1


CODE : 
Using Tabulation

class Solution {
  public:
  int solve(vector<int>&a,int n,int sum)
  {
      vector<vector<int>> t(n+1,vector<int> (sum+1));
      for(int i=0;i<n+1;i++)
      {
          for(int j=0;j<sum+1;j++)
          {
              
              if(i==0)
              {
                  t[i][j]=0;
              }
              if(j==0)
              {
                  t[i][j]=1;
              }
          }
      }
    
      for(int i=1;i<n+1;i++)
      {
          for(int j=0;j<sum+1;j++)
          {
              if(a[i-1]<=j)
              {
                  t[i][j]=t[i-1][j-a[i-1]]+t[i-1][j];
              }
              else 
              {
                 t[i][j]=t[i-1][j]; 
              }
          }
      }
      return t[n][sum];
  }
    int findTargetSumWays(vector<int>&a ,int target) {
        int sum=0;
        int n=a.size();
        for(int i=0;i<n;i++)
        {
            sum=sum+a[i];
        }
        int sum1=(sum-target)/2;
        if(sum < abs(target) || (target+sum) %2 != 0) return 0;
        else{
        return solve(a,n,sum1);
        }
    }
};
