CODE : Using DP memoisation

#include<bits/stdc++.h>
using namespace std;

int f(int n,vector<int> &dp)
{
    if(n<=1)
    {
        return n;
    }
    if(dp[n]!=-1)
    {
        return dp[n];
    }
    return dp[n]=f(n-1,dp)+f(n-2,dp);
}
int main()
{
    int n;
    cin>>n;
    vector<int> dp(n+1,-1);
    cout<<f(n,dp)<<endl;
    return 0;
}
 
 
 or
 
 Using tabulation
 
 #include<bits/stdc++.h>
using namespace std;

int f(int n,vector<int> &dp)
{
    dp[0]=0;
    dp[1]=1;
    for(int i=2;i<=n;i++)
    {
        dp[i]=dp[i-1]+dp[i-2];
    }
    return dp[n];

}
int main()
{
    int n;
    cin>>n;
    vector<int> dp(n+1,-1);
    cout<<f(n,dp)<<endl;
    return 0;
}



or

Removing space complexity

#include<bits/stdc++.h>
using namespace std;

int f(int n,int prev,int prev2)
{
    int curr[n];
    curr[0]=prev;
    curr[1]=prev2;
    for(int i=2;i<=n;i++)
    {
        curr[i]=prev+prev2;
        prev=prev2;
        prev2=curr[i];
    }
    return curr[n];
}

int main()
{
    int n;
    cin>>n;
    int prev=0;
    int prev2=1;
    cout<<f(n,prev,prev2)<<endl;
    return 0;
}
