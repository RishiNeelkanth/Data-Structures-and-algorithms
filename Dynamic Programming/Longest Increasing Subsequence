QUES : Longest Increasing Subsequence

Given an integer array nums, return the length of the longest strictly increasing subsequence.
A subsequence is a sequence that can be derived from an array by deleting some or no elements without changing the order of the remaining elements.
For example, [3,6,2,7] is a subsequence of the array [0,3,1,6,2,2,7].

 
->Example 1:
Input: nums = [10,9,2,5,3,7,101,18]
Output: 4
Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4.

->Example 2:
Input: nums = [0,1,0,3,2,3]
Output: 4

->Example 3:
Input: nums = [7,7,7,7,7,7,7]
Output: 1


CODE :

***** using memoization

class Solution {
public:
    int dp[2501][2501];
    int solve (int n,vector<int> &nums,int curr,int prev)
    {
        if(curr==n)
           {
               return 0;
           }
        if(dp[curr][prev+1]!=-1)
        {
            return dp[curr][prev+1];
        }
        // TAKE
        int take=0;
        if(prev==-1|| nums[curr]>nums[prev])
        {
            take=1+solve(n,nums,curr+1,curr);
        }
        //NOTTAKE
        int nottake=0;
        nottake=solve(n,nums,curr+1,prev);
        return dp[curr][prev+1]=max(take,nottake);
    }
    int lengthOfLIS(vector<int>& nums) {
        int n=nums.size();
        memset(dp,-1,sizeof(dp));
        return solve (n,nums,0,-1);
    }
};


******* USING TABULATION


class Solution
{
    public:
   
    int solve (int n,int nums[])
    {
        vector<vector<int>> dp(n+1,vector<int>(n+1,0));
        for(int curr=n-1;curr>=0;curr--)
        {
            for(int prev=curr-1;prev>=-1;prev--)
            {
                //take
                int take=0;
                if(prev==-1|| nums[curr]>nums[prev])
                    {
                        take=1+dp[curr+1][curr+1];
                    }
                //NOTTAKE
                int nottake=0;
                nottake=dp[curr+1][prev+1];
                dp[curr][prev+1]=max(nottake,take);
            }
        }
        return dp[0][0];
    }
    int longestSubsequence(int n, int nums[])
    {
       return solve (n,nums);
    }
};



******** More optimal sol (dp+binary search)

class Solution {
public:
    
    int solve (int n,vector<int> &nums)
    {
        if(n==0)
        {return 0;}
        vector<int> ans;
        ans.push_back(nums[0]);
        for(int i=1;i<n;i++)
        {
            if(nums[i]>ans.back())
            {
                ans.push_back(nums[i]);
            }
            else
            {
                int index=lower_bound(ans.begin(),ans.end(),nums[i])-ans.begin();
                ans[index]=nums[i];
            }
        }
        return ans.size();
    }
    int lengthOfLIS(vector<int>& nums) {
        int n=nums.size();
        return solve (n,nums);
    }
};
