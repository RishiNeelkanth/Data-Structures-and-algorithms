QUES :  Reducing Dishes

A chef has collected data on the satisfaction level of his n dishes. Chef can cook any dish in 1 unit of time.

Like-time coefficient of a dish is defined as the time taken to cook that dish including previous dishes multiplied by its satisfaction level i.e. time[i] * satisfaction[i].

Return the maximum sum of like-time coefficient that the chef can obtain after dishes preparation.

Dishes can be prepared in any order and the chef can discard some dishes to get this maximum value.

 

Example 1:

Input: satisfaction = [-1,-8,0,5,-9]
Output: 14
Explanation: After Removing the second and last dish, the maximum total like-time coefficient will be equal to (-1*1 + 0*2 + 5*3 = 14).
Each dish is prepared in one unit of time.
Example 2:

Input: satisfaction = [4,3,2]
Output: 20
Explanation: Dishes can be prepared in any order, (2*1 + 3*2 + 4*3 = 20)
Example 3:

Input: satisfaction = [-1,-4,-5]
Output: 0
Explanation: People do not like the dishes. No dish is prepared.

CODE :

****** USING MEMOIZATION

class Solution {
public:
    int dp[1001][1001];
    int solve(int n,vector<int>& satisfaction ,int index,int time)
    {
        if(index==n)
        {
            return 0;
        }
        if(dp[index][time]!=-1)
        {
            return dp[index][time];
        }
        int include=satisfaction[index]*(time+1)+solve(n,satisfaction,index+1,time+1);
        int exclude=solve(n,satisfaction,index+1,time);;
        return dp[index][time]=max(include,exclude);
    }
    int maxSatisfaction(vector<int>& satisfaction) {
        int n=satisfaction.size();
        memset(dp,-1,sizeof(dp));
        sort(satisfaction.begin(),satisfaction.end());
        return solve(n,satisfaction,0,0);
    }
};




**** USING TABULATION

class Solution {
public:
   
    int solve(int n,vector<int>& satisfaction)
    {
        vector<vector<int>> dp(n+1,vector<int> (n+1));
        if(n==0)
        {
            return 0;
        }
        for(int index=n-1;index>=0;index--)
        {
            for(int time=n-1;time>=0;time--)
            {
                 int include=satisfaction[index]*(time+1)+dp[index+1][time+1];
                 int exclude=dp[index+1][time];
                 dp[index][time]=max(include,exclude);
            }
        }
        return dp[0][0];
    }
    int maxSatisfaction(vector<int>& satisfaction) {
        int n=satisfaction.size();
        sort(satisfaction.begin(),satisfaction.end());
        return solve(n,satisfaction);
    }
};
