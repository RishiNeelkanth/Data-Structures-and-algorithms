QUES : Frog2

There are N stones, numbered 1,2,…,N. For each i (1≤i≤N), the height of Stone i is hi
There is a frog who is initially on Stone 1. He will repeat the following action some number of times to reach Stone N:
If the frog is currently on Stone i, jump to one of the following: Stone i+1,i+2,…,i+K. Here, a cost of ∣hi−hj|
is incurred, where j is the stone to land on.
Find the minimum possible total cost incurred before the frog reaches Stone N.


Sample Input 1 
Copy
5 3
10 30 40 50 20
Sample Output 1 
Copy
30
If we follow the path 1 → 2 → 5, the total cost incurred would be ∣10−30∣+∣30−20∣=30.

Sample Input 2 
Copy
3 1
10 20 10
Sample Output 2 
Copy
20
If we follow the path 1 → 2 → 3, the total cost incurred would be ∣10−20∣+∣20−10∣=20.

Sample Input 3 
Copy
2 100
10 10
Sample Output 3 
Copy
0
If we follow the path 1 → 2, the total cost incurred would be ∣10−10∣=0.

Sample Input 4 
Copy
10 4
40 10 20 70 80 10 20 70 80 60
Sample Output 4 
Copy
40
If we follow the path 1 → 4 → 8 → 10, the total cost incurred would be ∣40−70∣+∣70−70∣+∣70−60∣=40.


CODE :

USING MEMOIZATION 

#include<bits/stdc++.h>
using namespace std;
vector<int>h;
int k;
int find(int i,vector<int> &dp)
{
    if(i==0)
    {
        return 0;
    }
    if(dp[i]!=-1)
    {
        return dp[i];
    }
    int cost=INT_MAX;
    for(int j=1;j<=k;j++)
    {
        if(i-j>=0)
        {
            cost=min(cost,find(i-j,dp)+abs(h[i]-h[i-j]));        
        }
    }
    return dp[i]=cost;
}
int main()
{
    
    int n;
    cin>>n>>k;
    vector<int> dp(n,-1);
    int temp;
    for(int i=0;i<n;i++)
    {
        cin>>temp;
        h.push_back(temp);
    }
    cout<<find(n-1,dp);
    return 0;
}

