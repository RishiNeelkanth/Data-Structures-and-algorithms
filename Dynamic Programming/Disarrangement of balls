QUES : Disarrangement of balls

You are given N balls numbered from 1 to N and there are N baskets numbered from 1 to N in front of you, the ith basket is meant for the ith ball.
Calculate the number of ways in which no ball goes into its respective basket.


->Example 1:
Input: N = 2
Output: 1
Explanation: The balls are numbered 1 and 2. 
Then there is only one way to dearrange them. 
The (number-basket) pairs will be [(1-2),(2-1)].


->Example 2:
Input: 3
Output: 2
Explanation: The (number-basket) pairs are 
[(1-3),(2-1),(3-2)] and [(1-2),(2-3),(3-2)].


CODE ::

******Using Memoization

class Solution{
public:
long int mod=1000000007;
long int dp[10001];
    long int solve(int n)
    {
        if(n==1)
        {
            return 0;
        }
        if(n==2)
        {
            return 1;
        }
        if(dp[n]!=-1)
        {
            return dp[n];
        }
        long int ans=(((n-1)%mod)*((solve(n-1)%mod)+(solve(n-2)%mod))%mod);
        return dp[n]=ans;
    }
    long int disarrange(int N){
    memset(dp,-1,sizeof(dp));
    return solve(N);
    }
};



************* using tabulation

class Solution{
public:
long int mod=1000000007;
    long int solve(int n)
    {
        vector<long int> dp ( n+1 ,0);
       dp[1]=0;
       dp[2]=1;
        for(int i=3;i<=n;i++)
        {
            long int f=(dp[i-1]%mod);
            long int s=(dp[i-2]%mod);
            long int sum((f+s)%mod);
            dp[i]=(((i-1) * sum)%mod);
        }
        return dp[n];
    }
    long int disarrange(int N){
    return solve(N);
    }
};


*********using space optimization

class Solution{
public:
long int mod=1000000007;
    long int solve(int n)
    {
        vector<long int> dp ( n+1 ,0);
       long int a=0;
       long int b=1;
       long int ans=0;
        if(n == 1) return 0;
        if(n == 2) return 1;
        for(int i = 3; i <= n; i++)
        {
            long int f=(b%mod);
            long int s=(a%mod);
            long int sum((f+s)%mod);
            long int ans=(((i-1) * sum)%mod);
            a=b;
            b=ans;
        }
        return b;
    }
    long int disarrange(int N){
    return solve(N);
    }
};
