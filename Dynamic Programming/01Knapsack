QUES : 01Knapsack

You are given weights and values of N items, put these items in a knapsack of capacity W to get the maximum total value in the knapsack. Note that we have only one
quantity of each item.
In other words, given two integer arrays val[0..N-1] and wt[0..N-1] which represent values and weights associated with N items respectively. Also given an 
integer W which represents knapsack capacity, find out the maximum value subset of val[] such that sum of the weights of this subset is smaller than or equal to W. 
You cannot break an item, either pick the complete item or dont pick it (0-1 property).

->Example 1:
Input:
N = 3
W = 4
values[] = {1,2,3}
weight[] = {4,5,1}
Output: 3

->Example 2:
Input:
N = 3
W = 3
values[] = {1,2,3}
weight[] = {4,5,6}
Output: 0
CODE :

USING MEMOIZATION

class Solution

{
   public:
   //C++ | Memoization (DP) | optimal code 
 int knapSack1(int W, int wt[], int val[], int n,vector<vector<int>> &t){
   
      if(n==0||W==0){
         return 0;
        }
   
       if(t[n][W]!=-1){
         return t[n][W];
         }
     if(wt[n-1]<=W)
     return t[n][W]=max(val[n-1]+knapSack1(W-wt[n-1],wt,val,n-1,t),knapSack1(W,wt,val,n-1,t));
     else
          return t[n][W]=knapSack1(W,wt,val,n-1,t);
   
   }
   //Function to return max value that can be put in knapsack of capacity W.
   int knapSack(int W, int wt[], int val[], int n) 
    { 
       vector<vector<int>> t(n+1,vector<int>(W+1,-1));
       
     return  knapSack1(W,wt,val,n,t);
   }
};


OR OR OR OR OR

USING Tabulation


