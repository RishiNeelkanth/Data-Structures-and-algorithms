QUES : Number of Dice Rolls With Target Sum

You have n dice and each die has k faces numbered from 1 to k.
Given three integers n, k, and target, return the number of possible ways (out of the kn total ways) to roll the dice so the sum of the face-up numbers equals target. 
Since the answer may be too large, return it modulo 109 + 7.

 
->Example 1:
Input: n = 1, k = 6, target = 3
Output: 1
Explanation: You throw one die with 6 faces.
There is only one way to get a sum of 3.

->Example 2:
Input: n = 2, k = 6, target = 7
Output: 6
Explanation: You throw two dice, each with 6 faces.
There are 6 ways to get a sum of 7: 1+6, 2+5, 3+4, 4+3, 5+2, 6+1.

->Example 3:
Input: n = 30, k = 30, target = 500
Output: 222616187
Explanation: The answer must be returned modulo 109 + 7.

CODE :

*********** using memoization

class Solution {
public:
    int solve(int n, int k, int target,vector<vector<int>>& dp)
    {
        if(target<0)
     {
         return 0;
     }
        if(target==0 && n==0)
        {
            return 1;
        }
        if(target!=0 && n==0)
        {
            return 0;
        }
        if(target==0 && n!=0)
        {
            return 0;
        }
        if(dp[n][target]!=-1)
        {
            return dp[n][target];
        }
        int ans=0;
        for(int i=1;i<=k;i++)
        {
            ans=((ans+solve(n-1,k,target-i,dp))%1000000007);
        }
        return dp[n][target]=ans;
    }
    int numRollsToTarget(int n, int k, int target) {
        vector<vector<int>> dp(n+1,vector<int>(target+1,-1));
        return solve(n,k,target,dp);
    }
};




------------------------OOOOOOOORRRRRRRRRR-----------------------



*************** using tabulation

class Solution {
  public:
  long long solve(int f,int n ,int target)
  {
      vector<vector<long long>> dp(n+1,vector<long long>(target+1,0));
      dp[0][0]=1;
      for(int d=1;d<=n;d++)
      {
          for(int t=1;t<=target;t++)
          {
              long long ans=0;
              for(int i=1;i<=f;i++)
              {
                  if(t-i>=0)
                  {
                      ans=ans+dp[d-1][t-i];
                  }
              }
              dp[d][t]=ans;
          }
      }
      return dp[n][target];
      
  }
    long long noOfWays(int M , int N , int X) {
        return solve(M,N,X);
    }
};
