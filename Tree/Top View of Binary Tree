Ques: Top View of Binary Tree 
   
Given below is a binary tree. The task is to print the top view of binary tree. Top view of a binary tree is the set of nodes visible when the tree is viewed 
from the top. For the given below tree

       1
    /     \
   2       3
  /  \    /   \
4    5   6     7

Top view will be: 4 2 1 3 7
Note: Return nodes from leftmost node to rightmost node.

->Example 1:
Input:
      1
   /    \
  2      3
Output: 2 1 3

->Example 2:
Input:
       10
    /      \
  20        30
 /   \    /    \
40   60  90    100
Output: 40 20 10 30 100

Code:
** recursion 

class Solution
{
    map<int,pair<int,int>> myMap; //Map<width,pair<level,data>>
    public:
    //Function to return a list of nodes visible from the top view 
    //from left to right in Binary Tree.
    void topView(Node* root, int width, int level)
    {
        if(!root) return;
        auto iter = myMap.find(width) ;
        if(iter == myMap.end() ){
            myMap[width] = {level,root->data};
            //cout<<width<< "  "<<root->data<<endl;
        } else {
            if(iter->second.first > level){
                myMap[width] = {level,root->data};
            }
        }
        
        topView(root->left, width-1, level+1);
        topView(root->right, width+1, level+1);
    }
    vector<int> topView(Node *root)
    {
        vector<int> retVec;
        topView(root, 0, 1);
        
        for(auto it : myMap){
            retVec.push_back(it.second.second);
        }
        
        return retVec;
    }

};
