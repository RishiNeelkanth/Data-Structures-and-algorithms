Ques: Binary Tree Zigzag Level Order Traversal

Given the root of a binary tree, return the zigzag level order traversal of its nodes' values. (i.e., from left to right, then right to left for the next level and 
alternate between).

 

->Example 1:
Input: root = [3,9,20,null,null,15,7]
Output: [[3],[20,9],[15,7]]

->Example 2:
Input: root = [1]
Output: [[1]]

->Example 3:
Input: root = []
Output: []

Code:
** BFS

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
     vector<vector<int>> ans;
        if(!root)
        {
            return ans;
        }
        queue <TreeNode* > q;
        q.push(root);
        bool lr=true;
        while(!q.empty())
        {
            int s=q.size();
            vector<int>level(s); 
            for(int i=0;i<s;i++)
            {
                TreeNode *node=q.front();
                q.pop();
                int index = (lr) ? i : (s-1-i);
                level[index]=node->val;
                if(node->left) q.push(node->left);
                if(node->right) q.push(node->right);
            }
            lr=!lr;
            ans.push_back(level);
        }
        return ans;
    }
};

