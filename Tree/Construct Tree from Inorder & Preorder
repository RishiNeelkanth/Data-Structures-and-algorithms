QUES : Construct Tree from Inorder & Preorder 

Given 2 Arrays of Inorder and preorder traversal. Construct a tree and print the Postorder traversal. 

->Example 1:
Input:
N = 4
inorder[] = {1 6 8 7}
preorder[] = {1 6 7 8}
Output: 8 7 6 1

->Example 2:
Input:
N = 6
inorder[] = {3 1 4 0 5 2}
preorder[] = {0 1 3 4 2 5}
Output: 3 4 1 5 2 0
Explanation: The tree will look like
       0
    /     \
   1       2
 /   \    /
3    4   5

CODE : 

class Solution{
    public:
    int find(int in[],int element,int n)
    {
        for(int i=0;i<n;i++)
        {
            if(in[i]==element)
            {
                return i;
            }
        }
        return -1;
    }
    Node* construct(int in[],int pre[],int &index,int ins,int ine,int n)
    {
        //base conditions
        if(index>=n || ins>ine)
        {
            return NULL;
        }
        //induction
        int element = pre[index++];
        Node* root = new Node(element);
        int position=find(in,element,n);
        //recursive calls
        root->left=construct(in,pre,index,ins,position-1,n);
        root->right=construct(in,pre,index,position+1,ine,n);
        return root;
    }
    Node* buildTree(int in[],int pre[], int n)
    {
        int inorderindex=0;
        Node* ans=construct(in,pre,inorderindex,0,n-1,n);
        return ans;
    }
};
