QUES : Delete a node from BST 

Given a Binary Search Tree and a node value X. Delete the node with the given value X from the BST. If no node with value x exists, then do not make any change. 

->Example 1:
Input:
      2
    /   \
   1     3
X = 12
Output: 1 2 3
Explanation: In the given input there
is no node with value 12 , so the tree
will remain same.

->Example 2:
Input:
            1
             \
              2
                \
                 8 
               /    \
              5      11
            /  \    /  \
           4    7  9   12
X = 9
Output: 1 2 4 5 7 8 11 12
Explanation: In the given input tree after
deleting 9 will be
             1
              \
               2
                 \
                  8
                 /   \
                5     11
               /  \     \
              4    7     12


CODE : 


Node *deleteNode(Node *root, int key) {
   // your code goes here
   if(root == NULL)
       return NULL;
   if(root->data == key){
       // case1: no left and right nodes
       if(root->left == NULL && root->right == NULL){
           delete root;
           return NULL;
       } 
       // case2:
       // either left node is NULL or right node is NULL
       if(root->left!=NULL && root->right == NULL){
           Node*temp = root->left;
           delete root;
           return temp;
       }
       if(root->left == NULL && root->right!=NULL){
           Node*temp = root->right;
           delete root;
           return temp;
       }
       
       // case3: 
       //left and right node are not NULL
       // either take max value from left subtree or take min value from right subtree
       if(root->left != NULL && root->right != NULL){
           int mn = INT_MAX;
           Node*temp = root->right;
           while(temp!= NULL){
               mn = min(mn, temp->data);
               temp = temp->left;
           }
           
           root->data =mn;
           root->right = deleteNode(root->right, mn);
           return root;
       }
   }
   else if(key < root->data){
       root->left = deleteNode(root->left, key);
       return root;
   }
   else{
       root->right = deleteNode(root->right, key);
       return root;
   }
}
