QUES : Burning Tree 

Given a binary tree and a node called target. Find the minimum time required to burn the complete binary tree if the target is set on fire. It is known that in 1 second all nodes connected to a given node get burned. That is its left child, right child, and parent.


->Example 1:
Input:      
          1
        /   \
      2      3
    /  \      \
   4    5      6
       / \      \
      7   8      9
                   \
                   10
Target Node = 8
Output: 7
Explanation: If leaf with the value 
8 is set on fire. 
After 1 sec: 5 is set on fire.
After 2 sec: 2, 7 are set to fire.
After 3 sec: 4, 1 are set to fire.
After 4 sec: 3 is set to fire.
After 5 sec: 6 is set to fire.
After 6 sec: 9 is set to fire.
After 7 sec: 10 is set to fire.
It takes 7s to burn the complete tree.

->Example 2:
Input:      
          1
        /   \
      2      3
    /  \      \
   4    5      7
  /    / 
 8    10
Target Node = 10
Output: 5


CODE :

class Solution {
 public:
 Node* markParents(unordered_map<Node* , Node*>& parent_track,Node* root,int target){
    Node* targetNode=NULL;
     queue<Node*>q;
     q.push(root);
     parent_track[root]=NULL;
     while(!q.empty()){
         Node* current=q.front();
         q.pop();
         if(current->left){
             parent_track[current->left]=current;
         q.push(current->left);
             }
         if(current->right){
             parent_track[current->right]=current;
         q.push(current->right);
         }
         if(current->data==target){
             targetNode=current;
         }
     }
     return targetNode;
 }
 int findMaxDistance(unordered_map<Node* , Node*>&parent_track,Node* &targetNode){
     queue<Node*>q;
     q.push(targetNode);
     map<Node*,bool>visited;
     visited[targetNode]=true;
     int maxi=0;
     while(!q.empty())
   {   int flag=0;
     int size=q.size();
     for(int i=0;i<size;i++)
{
    Node* current=q.front();
    q.pop();
    if(current->left && !visited[current->left]){
        flag=1;
        visited[current->left]=true;
        q.push(current->left);
    }
     if(current->right && !visited[current->right]){
        flag=1;
        visited[current->right]=true;
        q.push(current->right);
    }
     if(parent_track[current] && !visited[parent_track[current]]){
        flag=1;
        visited[parent_track[current]]=true;
        q.push(parent_track[current]);
    }
}
if(flag==1)maxi++;
 }
     return maxi;
 }
 
   int minTime(Node* root, int target) 
   {
unordered_map<Node* , Node*>parent_track;
Node* targetNode=markParents(parent_track,root,target);
   int maxi=findMaxDistance(parent_track,targetNode);
   return maxi;
   }
};
