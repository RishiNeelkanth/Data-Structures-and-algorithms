Ques: Add Two Numbers

You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. 
Add the two numbers and return the sum as a linked list.
You may assume the two numbers do not contain any leading zero, except the number 0 itself.

->Example 1:
Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.

->Example 2:
Input: l1 = [0], l2 = [0]
Output: [0]

->Example 3:
Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
Output: [8,9,9,9,0,0,0,1]


Code:
** iteration



/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* sum=new ListNode(0);
        ListNode* c1=l1;
        ListNode* c2=l2;
        ListNode* d = sum;
        int tsum=0;
        while(c1!=NULL || c2!=NULL)
        {   tsum/=10;
         if(c1!= NULL)
         {
             tsum+=c1->val;
             c1=c1->next;
         }
         if(c2!=NULL)
         {
             tsum+=c2->val;
             c2=c2->next;
         }
            d->next=new ListNode(tsum%10);
         d=d->next;
        }
        if(tsum>9)
        {
             d->next=new ListNode(1);
        }
        return sum->next;
    }
};
