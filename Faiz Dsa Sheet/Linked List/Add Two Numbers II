Ques: Add Two Numbers II

You are given two non-empty linked lists representing two non-negative integers. The most significant digit comes first and each of their nodes contains a single digit.
Add the two numbers and return the sum as a linked list.
You may assume the two numbers do not contain any leading zero, except the number 0 itself.

->Example 1:
Input: l1 = [7,2,4,3], l2 = [5,6,4]
Output: [7,8,0,7]

->Example 2:
Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [8,0,7]

->Example 3:
Input: l1 = [0], l2 = [0]
Output: [0]

Code:
** Iteration

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    stack <int> ListToStack(ListNode* h)
    {    stack <int> temp;
        while(h!=NULL)
        {
            temp.push(h->val);
            h=h->next;
        }
     return temp;
    }
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
         stack <int> c1 = ListToStack(l1);
         stack <int> c2 = ListToStack(l2);
            int carry=0;
        ListNode* head=NULL;
        int tsum=0;
        while(!c1.empty() || !c2.empty() || carry!=0)
        {
            tsum=carry;
            if(!c1.empty())
            {
                tsum=tsum+c1.top();
                c1.pop();
            }
            if(!c2.empty())
            {
                tsum=tsum+c2.top();
                c2.pop();
            }
            ListNode* sum= new ListNode(tsum%10);
            sum->next=head;
            head=sum;
            carry=tsum/10;
        }
        return head;
    }
};
