Ques: Pairs of Songs With Total Durations Divisible by 60

You are given a list of songs where the ith song has a duration of time[i] seconds.

Return the number of pairs of songs for which their total duration in seconds is divisible by 60. 
Formally, we want the number of indices i, j such that i < j with (time[i] + time[j]) % 60 == 0.

 
->Example 1:
Input: time = [30,20,150,100,40]
Output: 3
Explanation: Three pairs have a total duration divisible by 60:
(time[0] = 30, time[2] = 150): total duration 180
(time[1] = 20, time[3] = 100): total duration 120
(time[1] = 20, time[4] = 40): total duration 60


->Example 2:
Input: time = [60,60,60]
Output: 3
Explanation: All three pairs have a total duration of 120, which is divisible by 60.

Code:

** Brute force  (TC=O(n^2))

class Solution {
public:
    int numPairsDivisibleBy60(vector<int>& time) {
        int count=0;
        int n=time.size();
        if(n<2)
        {return 0;}
        for(int i=0;i<n;i++)
        {
            for(int j=i+1;j<n;j++)
            {
                if((time[i]+time[j])%60==0)
                {
                    count++;
                }
            }
        }
        return count;
    }
};


** Optimised Approach  (tc=O(n))

class Solution {
public:
    int numPairsDivisibleBy60(vector<int>& time) {
        vector <long> map(60);
        for(int i=0;i<time.size();i++)
        {
            map[time[i]%60]+=1;       // to store the count of occurence of different numbers
        }
        
        long count=0;
        count+=((map[0]-1)*map[0])/2;      // for time[i]%60==0 case we do ((n-1)*n)/2
        count+=((map[30]-1)*map[30])/2;    // for time[i]%60==30 case we do ((n-1)*n)/2
        for(int i=1;i<=29;++i)
        {
            count+=map[i]*map[60-i];
        }
    return count;
    }
};
