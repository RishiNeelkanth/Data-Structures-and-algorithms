Ques: Squares of a Sorted Array

Given an integer array nums sorted in non-decreasing order, return an array of the squares of each number sorted in 
non-decreasing order.

->Example 1:
Input: nums = [-4,-1,0,3,10]
Output: [0,1,9,16,100]
Explanation: After squaring, the array becomes [16,1,0,9,100].
After sorting, it becomes [0,1,9,16,100].

->Example 2:
Input: nums = [-7,-3,2,3,11]
Output: [4,9,9,49,121]

Code:

**Brute Force(tc: O(nlogn))

class Solution {
public:
    vector<int> sortedSquares(vector<int>& nums) {
        for(int i=0;i<nums.size();i++)
        {
            nums[i]=nums[i]*nums[i];
        }
        sort(nums.begin(),nums.end());
        return nums;
    }
};

*** Using 2 pointer approach(tc:O(n))

class Solution {
public:
    vector<int> sortedSquares(vector<int>& nums) {
       int n=nums.size();
        vector <int> ans(n);
        int beg=0,end=n-1;
        int i=n-1;
        while(i>=0)
        {
            if(nums[beg]*nums[beg]<nums[end]*nums[end])
            {
                ans[i]=nums[end]*nums[end];
                i--;
                end--;
            }
            else{
                ans[i]=nums[beg]*nums[beg];
                i--;
                beg++;
            }
        }
        return ans;
