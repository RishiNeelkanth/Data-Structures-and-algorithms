Ques: Trapping Rain Water

Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it
can trap after raining.

->Example 1:
Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.

->Example 2:
Input: height = [4,2,0,3,2,5]
Output: 9

Code:

**2 pointer (TC=O(n) Sc=O(1))

class Solution {
public:
    int trap(vector<int>& height) {
        int n=height.size();
        vector<int> left(n);
        vector<int> right(n);
        left[0]=height[0];
        right[n-1]=height[n-1];
        int sum=0;
        int mini=0;
        for(int i=1;i<n;i++)
        {
            if(left[i-1]<height[i])
            {
                left[i]=height[i];
            }
            else{
                left[i]=left[i-1];
            }
        }
        for(int i=n-2;i>=0;i--)
        {
            right[i]=max(height[i],right[i+1]);
        }
        for(int i=0;i<n;i++)
        {
            mini=min(right[i],left[i]);
            sum=sum+(mini-height[i]);
        }
        return sum;
    }
};


** 2 pointer (TC=O(n) Sc=O(1)) 

class Solution {
public:
    int trap(vector<int>& height) {
        int n=height.size();
        int left=0;
        int right=n-1;
        int maxleft=0;
        int maxright=0;
        int sum=0;
        while(left<=right)
        {
            if(height[left]<=height[right])
            {
                if(height[left]>=maxleft)
                {
                    maxleft=height[left];
                    left++;
                }
                else
                {
                    sum=sum+(maxleft-height[left]);
                    left++;
                }
            }
            else
            {
                if(height[right]>=maxright)
                {
                    maxright=height[right];
                    right--;
                }
                else
                {
                    sum=sum+(maxright-height[right]);
                    right--;
                }
            }
        }
        return sum;
       
    }
};
