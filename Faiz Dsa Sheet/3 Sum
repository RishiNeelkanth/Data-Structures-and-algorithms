Ques: 3Sum

Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k,  
and nums[i] + nums[j] + nums[k] == 0.
Notice that the solution set must not contain duplicate triplets.


->Example 1:
Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]

->Example 2:
Input: nums = []
Output: []

->Example 3:
Input: nums = [0]
Output: []

Code:

** 2pointer (O(n^2))

class Solution {
public:
    vector<vector<int> > threeSum(vector<int> &num) {
    
    vector<vector<int> > res;

    sort(num.begin(), num.end());
	if(n<3)
	{
	return 0;
	}

    for (int i = 0; i < num.size(); i++) {
        
        int target = -num[i];            //a+b+c=0 so , b+c=-a , so target=-a, so b+c=target
        int left = i + 1;
        int right = num.size() - 1;

        while (left < right) {

            int sum = num[left] + num[right];
            
            // Finding answer which start from number num[i]
            if (sum < target)
                left++;

            else if (sum > target)
                right--;

            else {
                vector<int> triplet = {num[i], num[left], num[right]};
                res.push_back(triplet);
            
                while (left < right && num[left] == triplet[1]) left++;               // to ignore the duplication of variable value in left
                while (left < right && num[right] == triplet[2]) right--;             // to ignore the duplication of variable value in right 
            }
            
        }

        while (i + 1 < num.size() && num[i + 1] == num[i])                           // to ignore the duplication of variable value in i
            i++;

    }
    
    return res;
    
}
};
