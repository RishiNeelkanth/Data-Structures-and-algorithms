Ques: First Missing Positive

Given an unsorted integer array nums, return the smallest missing positive integer.
You must implement an algorithm that runs in O(n) time and uses constant extra space.

 
->Example 1:
Input: nums = [1,2,0]
Output: 3

->Example 2:
Input: nums = [3,4,-1,1]
Output: 2

->Example 3:
Input: nums = [7,8,9,11,12]
Output: 1


Code:

** brute force (tc=O(n),sc=O(1))

class Solution {
public:
    int firstMissingPositive(vector<int>& nums) {
     
        //Step1: change nums which is out of the range and make it 1 where range is from 1 to size of nums
        //Step2: element with index
        //Step3: print the first position at which a negative number is not present and return position+1
        
        int n=nums.size();    
        
      	//for base case since 1 is the smallest positive number and in further step make other elements equal to 1
        bool one=false;
        for(int i=0;i<n;i++)
        {
            if(nums[i]==1)
            {
                one=true;
            }
        }
        if(!one)
        {return 1;}
        
    for(int i=0;i<n;i++)
      {
          if(nums[i]<=0||nums[i]>n)
          {
              nums[i]=1;   
          }
      }
        
    for(int i=0;i<n;i++)
        {
            if(nums[abs(nums[i])-1]>0)
            {
               nums[abs(nums[i])-1]*=-1;
            }
        }
    for(int i=0;i<n;i++)
        {
            if(nums[i]>0)
            {
                return i+1;
            }
        }
        return n+1;
    }
};
