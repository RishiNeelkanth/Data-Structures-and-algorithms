Ques: Product of Array Except Self

Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of 
nums except nums[i].
The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.
You must write an algorithm that runs in O(n) time and without using the division operation.

->Example 1:
Input: nums = [1,2,3,4]
Output: [24,12,8,6]

->Example 2:
Input: nums = [-1,1,0,-3,3]
Output: [0,0,9,0,0]

Code:
** 2 pointer (tc=O(n),sc=O(n))
class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        int n=nums.size();
        vector<int> left(n);
        vector<int> right(n);
        vector<int> ans(n);
        left[0]=nums[0];
        right[n-1]=nums[n-1];
        for(int i=1;i<n;i++)
        {
            left[i]=left[i-1]*nums[i];
        }
        for(int i=n-2;i>=0;i--)
        {
            right[i]=right[i+1]*nums[i];
        }
        ans[0]=right[1];
        ans[n-1]=left[n-2];
    for(int i=1;i<n-1;i++)
    {
        
        ans[i]=left[i-1]*right[i+1];
        
    }
        return ans;
    }
};



**2 Pointer with more optimisation in space complexity(tc=O(n),sc=O(1))

class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        int n=nums.size();
        vector<int> ans(n);
        ans[0]=nums[0];
        for(int i=1;i<n;i++)
        {   
            ans[i]=ans[i-1]*nums[i];
        }
        int p=1;
        for(int i=n-1;i>0;i--)
        {
            ans[i]=ans[i-1]*p;
            p*=nums[i];
        }
        ans[0]=p;
        return ans;
    }
};
