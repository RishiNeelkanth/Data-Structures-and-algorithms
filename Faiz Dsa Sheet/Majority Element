Ques: Majority Element

Given an array nums of size n, return the majority element.
The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.

 
Example 1:
Input: nums = [3,2,3]
Output: 3

Example 2:
Input: nums = [2,2,1,1,1,2,2]
Output: 2

Code:
 
**Using Moore's Voting algorithm(optimised)

class Solution {
public:
    int majorityElement(vector<int>& nums) {
     int n=nums.size();
        int count=1;
        int ans=0;
        for(int i=1;i<n;i++)
        {
            if(nums[ans]==nums[i])
            {
                count++;
            }
            else{
                count--;
            }
            if(count==0)
            {
                count=1;
                ans=i;
            }
        }
        count=0;
        int temp=nums[ans];
        for(int i=0;i<n;i++)
        {
            if(temp==nums[i])
            {
                count++;
            }
        }
        if(count>n/2)
        {
            return temp;
        }
        else 
        {
            return 0;
        }
    }
};
