QUES : Check for Balanced Tree

This problem is part of GFG SDE Sheet. Click here to view more.   
Given a binary tree, find if it is height balanced or not. 
A tree is height balanced if difference between heights of left and right subtrees is not more than one for all nodes of tree. 

A height balanced tree
        1
     /     \
   10      39
  /
5

An unbalanced tree
        1
     /    
   10   
  /
5

->Example 1:
Input:
      1
    /
   2
    \
     3 
Output: 0
Explanation: The max difference in height
of left subtree and right subtree is 2,
which is greater than 1. Hence unbalanced

->Example 2:
Input:
       10
     /   \
    20   30 
  /   \
 40   60
Output: 1
Explanation: The max difference in height
of left subtree and right subtree is 1.
Hence balanced. 

CODE:
** recursion

class Solution{
    public:
    //Function to check whether a binary tree is balanced or not.
    bool isBalanced(Node *root)
    {
        return maxheight(root)!=-1;
    }
    
    int maxheight(Node *root)
    {
         if(root==NULL){return 0;}
         int lh=maxheight(root->left);
         if(lh==-1){return -1;}
         int rh=maxheight(root->right);
         if(rh==-1){return -1;}

         if(abs(lh-rh)>1){return -1;}
         return 1+max(rh,lh);
    }
};
