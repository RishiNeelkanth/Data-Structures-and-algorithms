QUES : Top View of Binary Tree 

Given below is a binary tree. The task is to print the top view of binary tree. Top view of a binary tree is the set of nodes visible when the tree is viewed from 
the top. For the given below tree

       1
    /     \
   2       3
  /  \    /   \
4    5  6      7

Top view will be: 4 2 1 3 7
Note: Return nodes from leftmost node to rightmost node.

->Example 1:
Input:
      1
   /    \
  2      3
Output: 2 1 3

->Example 2:

Input:
       10
    /      \
  20        30
 /   \    /    \
40   60  90    100
Output: 40 20 10 30 100


CODE:

class Solution
{
    public:
    //Function to return a list of nodes visible from the top view 
    //from left to right in Binary Tree.
    vector<int> topView(Node *root)
    {
        vector<int> ans;
        if(root==NULL)
        {
            return ans;
        }
        map<int,int> m;
        queue<pair<Node *,int>> q;
        q.push(make_pair(root,0));
        while(!q.empty())
        {
            auto p = q.front();
            q.pop();
            Node *node = p.first;
            int hd = p.second;
            if(m.find(hd)==m.end())
            {
                m[hd]=node->data;
            }
            if(node->left)
            {
                q.push(make_pair(node->left,hd-1));
            }
            if(node->right)
            {
                q.push(make_pair(node->right,hd+1));
            }
        }
        for(auto it : m)
        {
            ans.push_back(it.second);
        }
        return ans;
    }

};
