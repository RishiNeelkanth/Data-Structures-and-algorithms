QUES : Kth Ancestor in a Tree 

Given a binary tree of size  N, a node and a positive integer k., Your task is to complete the function kthAncestor(), the function should return \
the kth ancestor of the given node in the binary tree. If there does not exist any such ancestor then return -1.


->Example 1:
Input:
     K = 2
     Node = 4
Output: 1
Explanation:
Since, K is 2 and node is 4, so we
first need to locate the node and
look k times its ancestors.
Here in this Case node 4 has 1 as his
2nd Ancestor aka the Root of the tree.
 

->Example 2:
Input:
k=1 
node=3
      1
    /   \
    2     3

Output:
1
Explanation:
K=1 and node=3 ,Kth ancestor of node 3 is 1.

CODE : 


Node* solveRec(Node* root , int &k , int node ) {
   if(root==NULL){
       return NULL;
   }
   if(root->data == node){
       return root;
   }
   Node* leftans = solveRec(root->left , k , node );
   Node* rightans =solveRec(root->right , k , node );
   if(leftans!=NULL && rightans==NULL){ 
       --k;
       if(k==0){
           return root;
       } 
      return leftans;
  }
   else if(leftans==NULL && rightans!=NULL){
        --k;
       
       if(k==0){
           return root;
       }
           return rightans;   
   }
   else{
   return NULL;
   }
}
int kthAncestor(Node *root, int k, int node)
{
   // Code here
   Node* temp=solveRec(root , k , node );
   if(k>0){
       return -1;
   }
   return temp->data; 
}



OR
OR
OR



void solvekth(Node* root, int k ,int &cnt, int n, vector<int> path){
    
     if(root==NULL) return; 
     path.push_back(root->data);
     if(root->data==n) {
         int s=path.size();\
         if(sâ‰¥k+1)
         cnt=path[s-k-1];
         
         else
           cnt=-1;
     }
     solvekth(root->left,k,cnt,n,path);
     solvekth(root->right,k,cnt,n,path);
     path.pop_back();
     return;
}

int kthAncestor(Node *root, int k, int node)
{
   vector<int> path;
   int cnt=0;
   solvekth(root,k,cnt,node,path);
   return cnt;
}
