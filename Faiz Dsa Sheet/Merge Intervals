Ques: Merge Intervals

Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of 
the non-overlapping intervals that cover all the intervals in the input.

 
->Example 1:
Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].

->Example 2:
Input: intervals = [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.

Code:

**Brute Force (T.c=O(nlogn))

class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& interval) {
       sort(interval.begin(),interval.end());
        vector<vector<int>> m;
        m.push_back(interval[0]);
        int j=0;
        for(int i=1;i<interval.size();i++)
        {
           if(m[j][1]>=interval[i][0])
           {
               m[j][1]=max(m[j][1],interval[i][1]);
               // Dont do j++ here bcz we are comparing the new 2d array with old one
           }
            else
            {
                m.push_back(interval[i]);
                j++;
            }
        }
        return m;
    }
};
